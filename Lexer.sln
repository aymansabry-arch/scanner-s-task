import re

# Define regular expressions for each token type, with optional flags
token_specification = [
    ("COMMENT", r"////.*?$|/\*.*?\*/"),  # Comments (single-line // or multi-line /* */)
    ("KEYWORD", r"\b(?:int|char|float|double|void|return|if|else|for|while|switch|case|break|continue|"
                r"struct|union|enum|typedef|sizeof|long|short|unsigned|signed|const|volatile|static|"
                r"extern|goto|default|inline)\b"),  # Keywords
    ("ID", r"[A-Za-z_][A-Za-z0-9_]*"),  # Identifiers (variable names, function names)
    ("NUMBER", r"\b\d+(\.\d+)?\b"),  # Numeric constants (integer or float)
    ("OPERATOR", r"[+\-*/%<>=!&|^~]+"),  # Operators (+, -, *, /, %, <, >, ==, etc.)
    ("SPECIALCHAR", r"[,;:#\".@${}(){}\[\]]"),  # Special characters including braces, brackets, etc.
    ("WHITESPACE", r"[ \t]+"),  # Whitespace (spaces and tabs)
    ("NEWLINE", r"\n"),  # Newline
    ("MISMATCH", r"."),  # Any other character (error handling)
]

# Compile the regex patterns into a single pattern, enabling DOTALL for multi-line comments
token_regex = re.compile(
    "|".join(f"(?P<{name}>{pattern})" for name, pattern in token_specification),
    re.DOTALL
)

def lex(code):
    position = 0
    line_num = 1

    while position < len(code):
        # Match the next token in the input code
        mo = token_regex.match(code, position)
        if mo is None:
            raise RuntimeError(
                f"Unexpected character at position {position} on line {line_num}"
            )

        kind = mo.lastgroup
        value = mo.group()
        position = mo.end()

        # Skip whitespace and comments without emitting them as tokens
        if kind == "WHITESPACE" or kind == "COMMENT":
            continue

        # Handle newlines and update line number
        if kind == "NEWLINE":
            line_num += 1
            continue

        # For numeric values, convert them to appropriate types
        if kind == "NUMBER":
            value = float(value) if "." in value else int(value)

        # Yield the token (type and value)
        yield kind, value

# Function to accept multiline input code from the console
def main():
    print("Enter your C code (type 'END' on a new line to finish):")
    code = ""

    # Allow multiline input until "END" is entered
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        code += line + "\n"

    # Lexical analysis of the input code
    print("\nTokens:")
    for token in lex(code):
        print(f"{token[0]:<12} : {token[1]}")

if __name__ == "__main__":
    main()
